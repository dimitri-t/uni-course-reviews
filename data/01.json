[
 {
   "code": "COMP1000",
   "title": "Introduction to World Wide Web, Spreadsheets and Databases",
   "level": "Undergraduate",
   "description": "World wide web(WWW) dependent activities have become an essential part of our existence and yet many of us do not know much about how they works. In the first part of this course, we introduce the abstract features of the internet and the software that makes it so powerful. Knowledge about the architecture of the internet, world wide web, browsers, search engines, e-commerce, security, etc. will be helpful in using the internet more effectively as well as becoming aware of the several pifalls associated with this modern technology.\nSpreadsheets and databases are two of the most commonly used and powerful computer tools yet they are often poorly utilised and the reasons for using one rather than the other are poorly understood. Many people purchase Microsoft Office which comes bundled with Microsoft Excel and Microsoft Access - a spreadsheet and a database application - yet while many people have some familiarity with Microsoft Excel, Microsoft Access is rarely utilised. This course aims to explain in straightforward terms the concepts underlying both of these powerful pieces of software so that students can exploit them effectively for both their studies and future careers. It will investigate how to design and implement effective spreadsheet and database applications. Students should also be able to transfer these skills to other, similar spreadsheet and database packages. Students will be expected to have personal copies of Microsoft Excel and Microsoft Access on their own computers.\nNote(s): This course may not be taken by students enrolled in an Engineering program."
 },
 {
   "code": "COMP1010",
   "title": "The Art of Computing",
   "level": "Undergraduate",
   "description": "Computational thinking is a critical skill in modern society. This course aims to provide you with an understanding of the foundations of computing, how software systems work, and how to construct new software systems. By the end of the course, you will have produced an application (app) of your choice, solving a problem thats important to you.\nTopics: computer systems, computational problem solving, spreadsheets, programming in Python, interfaces.\nNote: This course is intended for students with no computing background, who wish to develop their knowledge of Python and computational problem solving. This course does not satisfy the L1 Engineering computing elective requirement (ie. it cannot be used to replace ENG1811 or COMP1911). Computer Science students with no prior computing experience could take this course as a Level 1 elective prior to taking COMP1511, but are strongly encouraged to enrol directly in COMP1511 and learn Python in COMP1531."
 },
 {
   "code": "COMP1400",
   "title": "Programming for Designers",
   "level": "Undergraduate",
   "description": "An introduction to the concepts and techniques of object oriented programming with a focus on the construction of interactive multimedia applications. Delivery is through lectures and computer lab classes. Assessment will be via a number of in-class exercises and staged assignments."
 },
 {
   "code": "COMP1511",
   "title": "Programming Fundamentals",
   "level": "Undergraduate",
   "description": "An introduction to problem-solving via programming, which aims to have students develop proficiency in using a high level programming language. Topics: algorithms, program structures (statements, sequence, selection, iteration, functions), data types (numeric, character), data structures (arrays, tuples, pointers, lists), storage structures (memory, addresses), introduction to analysis of algorithms, testing, code quality, teamwork, and reflective practice. The course includes extensive practical work in labs and programming projects.\nAdditional Information\nThis course should be taken by all CSE majors, and any other students who have an interest in computing or who wish to be extended. It does not require any prior computing knowledge or experience.\nCOMP1511 leads on to COMP1521, COMP1531, COMP2511 and COMP2521, which form the core of the study of computing at UNSW and which are pre-requisites for the full range of further computing courses.\nDue to overlapping material, students who complete COMP1511 may not also enrol in COMP1911 or COMP1921. "
 },
 {
   "code": "COMP1521",
   "title": "Computer Systems Fundamentals",
   "level": "Undergraduate",
   "description": "This course provides a programmers view on how a computer system executes programs, manipulates data and communicates. It enables students to become effective programmers in dealing with issues of performance, portability, and robustness. It is typically taken in the term after completing COMP1511, but could be delayed and taken later. It serves as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required.\n\nTopics:\nIntroduction to the systems-level view of computing, number representation, machine-level programming, representing high-level programs in machine code, memory, input/output, system architectures, operating systems, networks, parallelism/concurrency, communication/synchronisation. Labs and assignment work in C and machine code.\n"
 },
 {
   "code": "COMP1531",
   "title": "Software Engineering Fundamentals",
   "level": "Undergraduate",
   "description": "This course provides an introduction to software engineering principles: basic software lifecycle concepts, modern development methodologies, conceptual modeling and how these activities relate to programming. It also introduces the basic notions of team-based project management via conducting a project to design, build and deploy a simple web-based application. It is typically taken in the term after completing COMP1511, but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.\n\nThe goal of this course is to expose the students to:\nbasic elements of software engineering: including requirements elicitation, analysis and specification; design; construction; verification and validation; deployment; and operation and maintenancedata modellingsoftware engineering methodologies, processes, measurements, tools and techniquesWeb-based system architecture and development practices on Web platforms\n"
 },
 {
   "code": "COMP1911",
   "title": "Computing 1A",
   "level": "Undergraduate",
   "description": "This course introduces students to the basics of programming. The objective of the course is for students to develop proficiency in program design and construction using a high-level programming language. Topics covered include: fundamental programming concepts, the C programming language, programming style, program design and organisation, program testing and debugging. Practical experience of these topics is supplied through laboratory exercises and programming assignments.\nAdditional Information:\nThis course is designed for non-computing majors who want a solid introduction to programming, with the aim of using computers as part of some other discipline. It does not assume any prior background in programming.\nElectrical Engineering, Telecommunications, Mechanical Engineering, and Mechatronic Engineering specify this as the standard first year computing course. COMP1911 and the following course COMP1521 provide a solid introduction to programming an computer systems concepts for all of these students.\nStudents with an interest in computing or who wish to be extended might want to consider COMP1511 as an alternative, especially if they plan to study more computing as part of their future study. Students from all degrees are permitted to take COMP1511 instead of COMP1911.\nNote: Because of significant content overlap, students cannot take both COMP1911 and COMP1511."
 },
 {
   "code": "COMP2041",
   "title": "Software Construction: Techniques and Tools",
   "level": "Undergraduate",
   "description": "Software system decomposition and design. Overview of the software development life-cycle. Command languages. Version control and configuration management, programming for reliability. Testing and debugging techniques. Profiling and code improvement techniques. Practical work involving programming-in-the-large."
 },
 {
   "code": "COMP2111",
   "title": "System Modelling and Design",
   "level": "Undergraduate",
   "description": "This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations, and proof. It re-inforces, and builds on, prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use case-studies and assignments to develop competence. The methods developed in this course are used in the SENG2011 workshops and in safety-critical industrial contexts."
 },
 {
   "code": "COMP2121",
   "title": "Microprocessors and Interfacing",
   "level": "Undergraduate",
   "description": "Instruction Set Architecture (ISA), Floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and I/O interfacing (hardware and software), serial communication, timers, analog input and output, converting analog signals to digital signals (data acquisition), taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers."
 },
 {
   "code": "COMP2511",
   "title": "Object-Oriented Design & Programming",
   "level": "Undergraduate",
   "description": "This course aims to introduce students to the principles of object-oriented design and to fundamental techniques in object-oriented programming. It is typically taken in the second year of study, after COMP2521, to ensure an appropriate background in data structures. The knowledge gained in COMP2511 is useful in a wide range of later-year CS courses.\nThe goal of the course is to expose students to:\nthe fundamental principles of object-oriented designobject-oriented programming and object-oriented design in Javathe application of sound programming and design skillsproblem solving and modeling of real world problems from science, engineering, and economics using the object-oriented paradigm\nTopics:Objects. Object-oriented design. Design patterns. Design by contract. Object-oriented programming in Java. Practical work: labs, design project, implementation project."
 },
 {
   "code": "COMP2521",
   "title": "Data Structures and Algorithms",
   "level": "Undergraduate",
   "description": "The goal of this course is to deepen students understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. We anticipate that it will generally be taken in the second year of a program, but since its only pre-requisite is COMP1511, is it possible to take it in first year. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses.\nTopics: An introduction the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them, including: algorithm analysis, sorting, searching, trees, graphs, files, algorithmic strategies, analysis and measurement of programs. Labs and programming assignments in C, using a range of Unix tools."
 },
 {
   "code": "COMP3121",
   "title": "Algorithms and Programming Techniques",
   "level": "Undergraduate",
   "description": "Correctness and efficiency of algorithms. Computational complexity: time and space bounds. Techniques for best-case, worst-case and average-case time and space analysis. Designing algorithms using induction, divide-and-conquer and greedy strategies. Algorithms: sorting and order statistics, trees, graphs, matrices. Intractability: classes P, NP, and NP-completeness, approximation algorithms."
 },
 {
   "code": "COMP3131",
   "title": "Programming Languages and Compilers",
   "level": "Undergraduate",
   "description": "Covers the fundamental principles in programming languages and implementation techniques for compilers (emphasis on compiler front ends). Course contents include: program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL(k( and LR(k), attribute grammars, syntax-directed translation, type checking and code generation. Lab: implementation of a compiler in a modern programming language for a small programming language.\n"
 },
 {
   "code": "COMP3141",
   "title": "Software System Design and Implementation",
   "level": "Undergraduate",
   "description": "This course will present rigorous and formal methods for the design and implementation phases of software system development. Also considered are testing and reuse of designs. As far as possible, software tools that can assist the process will be used. The material will be presented using case studies, and students will be required to undertake a project."
 },
 {
   "code": "COMP3151",
   "title": "Foundations of Concurrency",
   "level": "Undergraduate",
   "description": "Concurrency  processes  communication. Communication via shared variables vs message passing. Models of concurrency: true concurrency vs interleaving. Abstractions: atomicity, locks and barriers, semaphores, monitors, threads, RPC, rendezvous. Classical problems: mutual exclusion, dining philosophers, sleeping barber, termination detection, gravitational N-body problem.Practical work: programming assignments and proving of program safety and liveness properties.\n"
 },
 {
   "code": "COMP3153",
   "title": "Algorithmic Verification",
   "level": "Undergraduate",
   "description": "It is virtually impossible to guarantee the correctness of a system, and in turn the absence of bugs by standard software engineering practice such as code review, systematic testing and good software design alone. The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software. The application of these fully automatic techniques is typically called algorithmic verification. The course will describe several automatic verification techniques, the algorithms they are based on, and the tools that support them. We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools.\n"
 },
 {
   "code": "COMP3161",
   "title": "Concepts of Programming Languages",
   "level": "Undergraduate",
   "description": "Programming language paradigms:  imperative, object oriented, declarative (i.e., functional and logic).  Theoretical foundations of programming languages:  syntax, operatational, axiomatic and denotational semantics.  Implementation aspects of central language features, such as dynamic and strong typing, polymorphism, overloading and automatic memory management.  Abstracting over programming languages and architectures: byte code approach, component software."
 },
 {
   "code": "COMP3211",
   "title": "Computer Architecture",
   "level": "Undergraduate",
   "description": "Study the architecture  organisation of modern processors, and influences upon these, with emphasis on pipelined RISC machines; gain understanding of the design of the memory subsystem, I/O, and system level interconnect; become proficient in the use of tools such as VHDL and SimpleScalar for the description, simulation, and verification of architectural designs; complete a series of assignments leading to the design, implementation, validatation and assessment of a RISC system. It is assumed students are familiar with combinational and sequential logic design principles and have some experience in the use of CAD tools to describe and simulate digital systems.\n"
 },
 {
   "code": "COMP3222",
   "title": "Digital Circuits and Systems",
   "level": "Undergraduate",
   "description": "This course aims to provide students with a knowledge of problem solving with digital systems (computer systems and digital circuits). The basic building blocks of combinational and sequential circuits are introduced to develop circuit solutions to problems and to understand and implement the design and operation of hardware models of digital and computer systems. HDLs will be used to describe circuits and state of the art computer aided design tools will be used to design complex systems."
 },
 {
   "code": "COMP3231",
   "title": "Operating Systems",
   "level": "Undergraduate",
   "description": "Operating System Organisation and services. Process management: scheduling, synchronisation and multiprocessors. Memory management: virtual memory, and paging. Storage management: file systems and I/O. Case studies include: UNIX  Windows. Programming assignments. Assumed Knowledge: C"
 },
 {
   "code": "COMP3311",
   "title": "Database Systems",
   "level": "Undergraduate",
   "description": "Data models: entity-relationship, relational, object-oriented. Relational database management systems: data definition, query languages, development tools. Database application design and implementation. Architecture of relational database management systems: storage management, query processing, transaction processing. Lab: design and implementation of a database application."
 },
 {
   "code": "COMP3331",
   "title": "Computer Networks and Applications",
   "level": "Undergraduate",
   "description": "Networking technology overview. Protocol design and validation using the finite state automata in conjunction with time-lines. Overview of the IEEE802 network data link protocol standards. Addressing at the data link and network layers. Network layer services. Introduction to routing algorithms such as Distance Vector and Link State. Congestion control mechanisms. Internetworking issues in connecting networks. The Internet Protocol Suite overview. The Internet protocols IPv4 and IPv6. Address resolution using ARP and RARP. Transport layer: issues, transport protocols TCP and UDP. Application level protocols such as: File Transfer Protocol (FTP), Domain Name System (DNS) and Simple Mail Transfer Protocol (SMTP). Introduction to fundamental network security concepts, 802.11 wireless networks and peer to peer networks. There is a substantial network programming component in the assessable material."
 },
 {
   "code": "COMP3411",
   "title": "Artificial Intelligence",
   "level": "Undergraduate",
   "description": "Machine intelligence. Principles: knowledge representation, automated reasoning, machine learning. Tools: AI programming languages, control methods, search strategies, pattern matching. Applications: computer vision, speech recognition, natural language processing, expert systems, game playing, computer-aided learning. Philosophical and psychological issues. Lab: logic programming assignments."
 },
 {
   "code": "COMP3421",
   "title": "Computer Graphics",
   "level": "Undergraduate",
   "description": "Graphics hardware: scan conversion of lines and polygons. 2D transformations: windowing, clipping, viewports. User interfaces. 3D transformations: perspective transformation, 3D clipping, hidden surface removal, lighting and texture maps. Hierarchical modelling of objects, modelling curves and surfaces with splines and fractals. Graphics standards. Lab: programming assignments."
 },
 {
   "code": "COMP3431",
   "title": "Robotic Software Architecture",
   "level": "Undergraduate",
   "description": "An introduction to Intelligent agent design.  Picking actions using planning, learning or engineered control.  Both practical and theoretical components.  Practical component: Re-implement parts of a real agent architecture on a robot.  Assignment based.  Emphasis on engineering a working system.  Theoretical component: Introduction to a variety of research agent architectures including classical planning and reinforcement learning.  Lecture and lab based."
 },
 {
   "code": "COMP3511",
   "title": "Human Computer Interaction",
   "level": "Undergraduate",
   "description": "Provides an introduction to user-system interactions, both analysis and design. The approach is cognitive, focusing on matching user goals with computer technologies. Topics: the human information processing system, models of interaction, strategies for and process of design and evaluation. Project work is emphasised."
 },
 {
   "code": "COMP3601",
   "title": "Design Project A",
   "level": "Undergraduate",
   "description": "Embedded system design team projects. Embedded system design life cycle. Software/hardware codesign. Hardware slection process. Software development techniques. Hardware/software integration and system testing. Ethics in teams, ethics in design, IP protection, IP reuse, project report writing. Project and team management.\n"
 },
 {
   "code": "COMP3821",
   "title": "Extended Algorithms and Programming Techniques",
   "level": "Undergraduate",
   "description": "As for COMP3121 but in greater depth."
 },
 {
   "code": "COMP3891",
   "title": "Extended Operating Systems",
   "level": "Undergraduate",
   "description": "As for COMP3231 Operating Systems but in greater depth and breadth.Assumed Knowledge:  C"
 },
 {
   "code": "COMP3900",
   "title": "Computer Science Project",
   "level": "Undergraduate",
   "description": "A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates contributions to the project."
 },
 {
   "code": "COMP3901",
   "title": "Special Project A",
   "level": "Undergraduate",
   "description": "The student will complete a small research project under the supervision of a member of the academic staff of the School. The project will be assessed on the basis of a report written by the student."
 },
 {
   "code": "COMP3902",
   "title": "Special Project B",
   "level": "Undergraduate",
   "description": "The student will complete a medium-sized research project under the supervision of a member of the academic staff of the School. The project will be assessed on the basis of report written by the student."
 },
 {
   "code": "COMP4121",
   "title": "Advanced Algorithms",
   "level": "Undergraduate and Postgraduate",
   "description": "This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some randomized algorithms and data structures, such as randomized hashing, skiplists, order statistics and Kargers randomized Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, including some of the most important algorithms used in Data Science.\n"
 },
 {
   "code": "COMP4128",
   "title": "Programming Challenges",
   "level": "Undergraduate",
   "description": "The focus of the course is the development and implementation of advanced algorithms. Students will learn to select appropriate algorithms for a given problem, integrate multiple algorithms for solving a complex problem, design new algorithms, and implement them.  Algorithms covered include dynamic programming, shortest path, max flow, suffix trees, and combinatorial algorithms. They will also learn skills required for programming contests, which include evaluation of problem difficulty, solving problems in teams, and work under time pressure."
 },
 {
   "code": "COMP4141",
   "title": "Theory of Computation",
   "level": "Undergraduate and Postgraduate",
   "description": "Computability: formal languages and problems, Turing Machines (TMs), computability, (semi-)decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages (CFLs), Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic (and its role in a proof of Gödels incompleteness result)"
 },
 {
   "code": "COMP4161",
   "title": "Advanced Topics in Software Verification",
   "level": "Undergraduate and Postgraduate",
   "description": "This course is about mechanical proof assistants, how they work, and what they can be used for. It presents specification and proof techniques used in industrial grade theorem provers, teaches the theoretical background to the techniques involved, and shows how to use a theorem prover to conduct formal proofs in practice. The courses is intended to bring third/fourth year and postgraduate students into contact with the current research topics in the field of theorem proving and automated deduction and to teach them the necessary skills to successfully use industrial grade verification environments in modelling and verification.\nTopics covered included: higher order logic, natural deduction, lambda calculus, term rewriting, data types and recursive functions, induction principles, calculational reasoning, mathematical proofs, decision procedures for a variety of logical domains, and proofs about programs.\nNote: experience with (first-order) logic and functional programming is required."
 },
 {
   "code": "COMP4336",
   "title": "Mobile Data Networking",
   "level": "Undergraduate",
   "description": "This course will examine how mobility affects networks, systems, and applications. It will teach advanced concepts and protocols for managing mobility in TCP/IP networks, improving spectrum and energy efficiency of mobile networking, realizing more direct form of device-to-device communication, enhancing the quality of experience of mobile video, and achieving self-powered wireless communication. Learning emerging device functionalities and features will be part of this course, which requires some basic understanding of mobile device programming, such as Android and Java. "
 },
 {
   "code": "COMP4337",
   "title": "Securing Fixed and Wireless Networks",
   "level": "Undergraduate",
   "description": "With exponential growth of the Internet, security of a network has become increasingly challenging. This subject will explore the security vulnerabilities in both fixed and wireless networks and cover the fundamental concepts and advanced issues with an emphasis on the Internet architecture and protocols. The following key concepts will be covered: Wireless Communications and Security overview, Review of Cryptographic techniques, 802.11 Technologies and legacy 802.11 Security: lessons learnt, Encryption Ciphers and Methods in Wireless Networks, Wireless Security Risks, Wireless Security Auditing and Pen Test Introduction,  IPSec and IP layer security,  PKI/X.509, Transport Layer Security/DTLS,   Intrusion Detection and Protection Systems, Network Firewalls, Secure Neighbor Discovery, Routing and Forwarding Security,  Authentication and Key Management in Wireless Networks/Sensor Networks,   Broadcast Security and Secure Code Dissemination,  Network Privacy and Anonymity, Security and Privacy in Location Services, Smart Grid and IoT security."
 },
 {
   "code": "COMP4418",
   "title": "Knowledge Representation and Reasoning",
   "level": "Undergraduate and Postgraduate",
   "description": "Knowledge Representation and Reasoning (KRR) is at the core of Artificial Intelligence. It is concerned with the representation of knowledge in symbolic form and the use of this knowledge  for reasoning. This course presents current trends and research issues in Knowledge Representation and Reasoning (KRR). It enables students interested in Artificial Intelligence to deepen their  knowledge in this important area and gives them a solid background for doing their own work/research in this area. The topics covered in more detail are AI Logics, Probablilistic  Reasoning, Constraints, and Game Theory."
 },
 {
   "code": "COMP4511",
   "title": "User Interface Design and Construction",
   "level": "Undergraduate and Postgraduate",
   "description": "This course is a project-based course designed to build on the basic skills acquired in COMP3511 – Human Computer Interaction. The course addresses the skills and knowledge required in industry to brainstorm, design, implement, and evaluate an application through the user-centred design process. Because this is an iterative process, students will be required to build their interface at least three times, starting with a low-fidelity prototype and building to high-fidelity and more complete prototypes. By the end of the course, students should have a solid understanding of the importance of user-centred design and how it is applied in the industry to design, test and build a functioning application. \nThe course is built to reflect up-to-date industry practice and methods. You would have benefitted from also completing COMP2911, which introduces you to object-oriented techniques, UML and design patterns. Whilst you will be coding in this course to build an iteration of your application, this is not the focus of the course, which remains on design practices and testing of graphical user interfaces. "
 },
 {
   "code": "COMP4601",
   "title": "Design Project B",
   "level": "Undergraduate",
   "description": "Hardware design and systems prototyping using field-programmable gate  arrays.  Emphasises laboratory experience in programming and interfacing with FPGAs.  Acceleration of soft-core processors, design of custom accelerator blocks and configurable logic-based applications from areas such as telecommunications, signal processing, cryptography and biological sequencing.  Techniques for designing and implementing configurable systems.  CAD challenges posed by the area.  Design validation, performance analysis and power consumption.  Reconfigurable systems."
 },
 {
   "code": "COMP4920",
   "title": "Professional Issues and Ethics in Information Technology",
   "level": "Undergraduate",
   "description": "What if companies claimed ownership of your personal details or photos and charged you to prevent them being made public? Or if devices were controlled by buggy software or software with potentially malicious backdoors? The pervasive nature of computing in today’s society puts a great deal of responsibility on IT professionals to maintain high ethical and quality standards and uphold the trust of the public. Professional bodies now consider all these essential competencies for computing professionals.\n\nIn this capstone course, students will gain an appreciation of the responsibilities of a computing professional and apply ethical theories and reasoning to IT industry issues such as software quality, privacy and security, intellectual property and legal obligations of IT practitioners.\n"
 },
 {
   "code": "COMP4951",
   "title": "Research Thesis A",
   "level": "Undergraduate",
   "description": "The thesis provides an opportunity for you to bring together engineering principles learned over your previous years of study and apply these principles to innovatively solve problems such as the development of a specific design, process and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis and interpretation of results. There are multiple possible solutions or conclusions at the outset and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in scientific or engineering terms, manage an technical project and find solutions by applying scientific and engineering methods. You will also develop their ability to work in a research and development environment. Students must find a supervisor and project by the end of week 1 of Thesis A. This is the first course of the 3 course thesis structure."
 },
 {
   "code": "COMP4952",
   "title": "Research Thesis B",
   "level": "Undergraduate",
   "description": "The thesis provides an opportunity for you to bring together engineering principles learned over your previous years of study and apply these principles to innovatively solve problems such as the development of a specific design, process and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis and interpretation of results. There are multiple possible solutions or conclusions at the outset and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in scientific or engineering terms, manage an technical project and find solutions by applying scientific and engineering methods. You will also develop their ability to work in a research and development environment. You must identify a supervisor and project prior to enrolling in this course. This is the first course of the 3 course thesis structure.\n"
 },
 {
   "code": "COMP4953",
   "title": "Research Thesis C",
   "level": "Undergraduate",
   "description": "The thesis provides an opportunity for you to bring together engineering principles learned over your previous years of study and apply these principles to innovatively solve problems such as the development of a specific design, process and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis and interpretation of results. There are multiple possible solutions or conclusions at the outset and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in scientific or engineering terms, manage an technical project and find solutions by applying scientific and engineering methods. You will also develop their ability to work in a research and development environment. You must identify a supervisor and project prior to enrolling in this course. This is the first course of the 3 course thesis structure.\n"
 },
 {
   "code": "COMP4961",
   "title": "Computer Science Thesis A",
   "level": "Undergraduate",
   "description": "The thesis provides an opportunity for you to bring together engineering principles learned over your previous years of study and apply these principles to innovatively solve problems such as the development of a specific design, process and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis and interpretation of results. There are multiple possible solutions or conclusions at the outset and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in scientific or engineering terms, manage an technical project and find solutions by applying scientific and engineering methods. You will also develop their ability to work in a research and development environment. Students must find a supervisor and project by the end of week 1 of Thesis A. This is the first course of the 3 course thesis structure."
 },
 {
   "code": "COMP4962",
   "title": "Computer Science Thesis B",
   "level": "Undergraduate",
   "description": "The thesis provides an opportunity for you to bring together engineering principles learned over your previous years of study and apply these principles to innovatively solve problems such as the development of a specific design, process and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis and interpretation of results. There are multiple possible solutions or conclusions at the outset and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in scientific or engineering terms, manage an technical project and find solutions by applying scientific and engineering methods. You will also develop their ability to work in a research and development environment. You must have successfully completed COMP4961 prior to enrolling in this course. This is the second course of the 3 course thesis structure."
 },
 {
   "code": "COMP4963",
   "title": "Computer Science Thesis C",
   "level": "Undergraduate",
   "description": "The thesis provides an opportunity for you to bring together engineering principles learned over your previous years of study and apply these principles to innovatively solve problems such as the development of a specific design, process and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis and interpretation of results. There are multiple possible solutions or conclusions at the outset and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in scientific or engineering terms, manage an technical project and find solutions by applying scientific and engineering methods. You will also develop their ability to work in a research and development environment. You must have successfully completed COMP4962 prior to enrolling in this course. This is the third and final course of the 3 course thesis structure."
 },
 {
   "code": "COMP6080",
   "title": "Web Front-End Programming",
   "level": "Undergraduate and Postgraduate",
   "description": "This course introduces the fundamentals and advanced techniques of programming for the web front-end in JavaScript.\nThe topic covered are: JavaScript, CSS, the context of web front-end programming, Javascript Frameworks, Web Web user interface design and Web front-end security."
 },
 {
   "code": "COMP6324",
   "title": "Internet of Things Service Design and Engineering",
   "level": "Undergraduate and Postgraduate",
   "description": "This course aims to introduce the students to core concepts and practical skills for designing and engineering IoT services and applications. Specifically, the course aims to expose students to IoT business strategy, requirements, IoT technologies, solution design and implementation. "
 },
 {
   "code": "COMP6441",
   "title": "Security Engineering and Cyber Security",
   "level": "Undergraduate and Postgraduate",
   "description": "Introduction to computer security, prevention of cybercrime and cyberterror. The principles of engineering secure systems. How to think like a security engineer.\nEngineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.\nAdditional topics drawn from recent developments and current research in applied computer security.\nThere are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.\nA programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners."
 },
 {
   "code": "COMP6443",
   "title": "Web Application Security and Testing",
   "level": "Undergraduate and Postgraduate",
   "description": "Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.\nThis course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.\nThe course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.\nA programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners."
 },
 {
   "code": "COMP6445",
   "title": "Digital Forensics",
   "level": "Undergraduate and Postgraduate",
   "description": "This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.\nThis course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.\nThe course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods."
 },
 {
   "code": "COMP6447",
   "title": "System and Software Security Assessment",
   "level": "Undergraduate and Postgraduate",
   "description": "This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.\nStudents from this course will engage in war games competitions,  analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.\nThe course covers techniques and skills including vulnerability classes, Source code auditing Fuzzing Security Bugs Software Security Assurance Taint Analysis Memory Corruption, Overflows, Return Oriented Programming  Course coverage will be constantly updated over time to reflect emerging attack and defence methods. \nThere are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.  These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio. \nStudents need a keen devious and analytical mind.  To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners."
 },
 {
   "code": "COMP6448",
   "title": "Security Engineering Masterclass",
   "level": "Undergraduate and Postgraduate",
   "description": "This is an occasional course that will involve a visiting expert in the security area giving a series of lectures and workshops on an advanced topic in cyber security. The precise timing and topics depend on the visitor. The course will be run in intensive mode."
 },
 {
   "code": "COMP6449",
   "title": "Security Engineering Professional Practice",
   "level": "Undergraduate and Postgraduate",
   "description": "The professional practice of cyber security. Students learn how to be effective and ethical cyber security professionals.\nStudents from this course will engage in real world case studies and analyse and critique effective professional responses to situations and challenges. Guest lecturers from Industry will give a number of different views into the world of cyber security professionals , the key issues they face, and current best practice.\nCoverage includes Standards, Audits, Organisational Analysis and Testing, Best Practice, Ethics, Legal, Professionalism. Professional issues and best practice in cybercrime, censorship terrorism, IP, mandatory data breech disclosure, privacy, risk assessment, institutional response to risk, leadership, organisational change management and culture change, Professional Practice and professionalism. Course coverage will be regularly updated over time to reflect emerging best practice in the security engineering profession. "
 },
 {
   "code": "COMP6451",
   "title": "Cryptocurrency and Distributed Ledger Technologies",
   "level": "Undergraduate and Postgraduate",
   "description": "The course considers the requirements for electronic payment systems and how these requirements are realised using distributed ledger technologies. The technical ideas studied include the key cryptographic constructs, economic incentive mechanisms and distributed algorithms underpinning cryptocurrencies such as Bitcoin and Ethereum. The concept of smart contract will be introduced, and the course aims to develop a basic facility with programming smart contracts on one cryptocurrency platform. The course also aims to introduce students to the broader context of the range of alternate designs for distributed ledger technologies, the range of potential applications for these technologies, and the socio-economic, ethical and legal dimensions of their use. "
 },
 {
   "code": "COMP6452",
   "title": "Software Architecture for Blockchain Applications",
   "level": "Undergraduate and Postgraduate",
   "description": "This course addresses the knowledge that is needed in order to build applications based on blockchain technology, by offering an architectural view of software systems that make beneficial use of it. It provides guidance on assessing the suitability of blockchain, on the roles blockchain can play in an architecture, on designing blockchain applications, and on assessing different architecture designs and tradeoffs. It also serves as a reference on blockchain design patterns and design analysis, and refers to practical examples of blockchain-based applications.\nThe course covers the following:\na general introduction to the topic and to existing blockchain platforms including Bitcoin, Ethereum, and Hyperledger Fabric, and offers examples of blockchain-based applications;the functional aspects of software architecture are covered, describing the main roles blockchain can play in an architecture, as well as its potential suitability and design process;non-functional aspects of blockchain applications, which are often cross-cutting concerns including cost estimation, performance, security;\nReal-world use cases will be covered, offering additional insights from a practical perspective."
 },
 {
   "code": "COMP6714",
   "title": "Information Retrieval and Web Search",
   "level": "Undergraduate and Postgraduate",
   "description": "Information Retrieval:  (a) Document modeling (b) Inverted index construction and compression (c)Vector space model and ranking methods (d) Probabilistic and language models (e) Evaluation methods (f) Relevance feedback and query expansion.Web Search:  (a) Web search engine architecture (b) Web crawling and indexing (c) Web structure and usage analytics.The lecture materials will be complemented by projects and assignments."
 },
 {
   "code": "COMP6721",
   "title": "(In-)Formal Methods: The Lost Art",
   "level": "Undergraduate and Postgraduate",
   "description": "(In-)Formal Methods are practical structuring and design patterns that encourage programming that is easy to understand and to maintain. They are only a part of the large body of “good programming practices,” distinguished from that larger set because –for the methods we consider– the computer-science community has determined the science behind the structures: we know why they are effective.\nUnusually, this course does not take the traditional route of teaching that science first, and then turning it into practical programming “tools-of-thought.” Instead, we teach the mental tools first, try them on examples and only then, once their effectiveness has been demonstrated, will we look behind the scenes to see where they come from.\nInitially the material will deal with conventional programs, those that must “give the right output.” (This is known as functional correctness, and a sorting program is a simple example.) Later in the course we will look at additional correctness criteria, such as security (perform this calculation in a way that keeps part of the answer hidden) and randomisation (implement over-the-internet protocols that depend intrinsically on coin-flipping). Those last two topics will draw on up-to-the-minute research."
 },
 {
   "code": "COMP6733",
   "title": "Internet of Things Experimental Design Studio",
   "level": "Undergraduate and Postgraduate",
   "description": "Internet of Things (IoT) will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with hands-on experience with a popular end-to-end IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications (Bluetooth Low Energy and 6LoWPAN) and security issues, sensors and sensor data smoothing and filtering, light-weight in-situ machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voice-based stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C."
 },
 {
   "code": "COMP6741",
   "title": "Algorithms for Intractable Problems",
   "level": "Undergraduate and Postgraduate",
   "description": "The course focuses on algorithms for solving intractable computational problems, so-called NP-hard problems. Ideally, one would want to design algorithms that solve each instance exactly and in polynomial time. But since no polynomial time algorithm is known for any NP-hard problem, we will relax these requirements and design algorithms that either do not solve the problem exactly, that only solve a subset of instances, or whose worst-case running time is super-polynomial in the input size or some other parameter of the input.\n\nAmong algorithms that do not solve the problem exactly, we discuss heuristics and approximation algorithms. Heuristics do not guarantee to compute optimal solutions but tend to work well in practice. Approximation algorithms give additional guarantees of the quality of computed solution as compared to the optimal solution.\n\nAmong algorithms that only solve a subset of instances, we discuss graph classes where NP-hard graph problems often become polynomial-time solvable when the input is restricted to these classes.\n\nAmong algorithms that do not run in polynomial time, we discuss exponential-time algorithms and parameterized algorithms. In exponential-time algorithms we discuss algorithmic techniques to solve NP-hard problems provably faster than brute-force in the worst case. In parameterized algorithms, a parameter k is associated with each instance and the goal is to design algorithms whose worst-case running time is fast whenever k is small. We will also see lower bounds for problems and how to rule out certain running times under various complexity assumptions.\n"
 },
 {
   "code": "COMP6752",
   "title": "Modelling Concurrent Systems",
   "level": "Undergraduate and Postgraduate",
   "description": "This course tries to make students familiar with state-of-the-art  techniques in modelling concurrent systems. This is done by comparing  some of the more successful models of concurrency found in the  literature. The focus will be on the rationale behind the design  decisions underlying those models, viewed from philosophical,  mathematical and computational perspectives. The course contains  important background knowledge for students aiming at a scientific  career in which the design of mathematical models of system behaviour is  a component.\nTopics chosen from: semantic models of  concurrent and distributed systems (e.g. process algebra, event  structures, Petri nets, Chu spaces), operational and denotational  semantics, semantic equivalences and implementation relations, linear  versus branching time, interleaving versus partial order semantics, true  concurrency, algorithms for equivalence checking and their complexity,  modal and temporal logic for concurrent systems."
 },
 {
   "code": "COMP6771",
   "title": "Advanced C++ Programming",
   "level": "Undergraduate and Postgraduate",
   "description": "This course introduces the fundamentals and advanced techniques of object-oriented programming in C.\n\nObject-oriented inheritance techniques. Advanced techniques with functions. Memory and resource management. Namespaces. Run time type information. Templates and generic programming. C Template metaprogramming. The Standard Template Library (e.g., algorithms, containers and iterators). Input/Output with C iostreams library. Exception handling. C and Efficiency issues. Effective C design guidelines.\n"
 },
 {
   "code": "COMP6841",
   "title": "Extended Security Engineering and Cyber Security",
   "level": "Undergraduate and Postgraduate",
   "description": "Introduction to computer security, cybercrime, and cyberterror. The principles of engineering secure systems. How to think like a security engineer.\nEngineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.\nAdditional topics drawn from recent developments and current research in applied computer security.\nThere are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.\nA programming background is required , especially for the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners.\n\nThis is the extended version of COMP6441. In addition to the COMP6441 material above, this course includes coverage of reversing x86 machine code into C/C and an introduction to malware decomposition and analysis\nNote: This course requires knowledge of C programming"
 },
 {
   "code": "COMP6843",
   "title": "Extended Web Application Security and Testing",
   "level": "Undergraduate and Postgraduate",
   "description": "Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.\nThis course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.\nThe course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.\nThere are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.\nA programming background is required. Students also need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.\nThis is the extended version of COMP6443. This course includes the material of COMP6443 plus penetration testing, and red teaming. Students will work in teams to conduct penetration tests and report on them to real and simulated clients."
 },
 {
   "code": "COMP6845",
   "title": "Extended Digital Forensics and Incident Response",
   "level": "Undergraduate and Postgraduate",
   "description": "This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.\nThis course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.\nThe course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods.\nThis is the extended version of COMP6445. This course includes the material of COMP6445 plus malware analysis and incident response."
 },
 {
   "code": "COMP9020",
   "title": "Foundations of Computer Science",
   "level": "Postgraduate",
   "description": "Scope:  * Mathematical methods for designing correct and efficient programs.* Mathematics for algorithm analysis.* Logic for proving and verification.Topics: * Introduction to set and relation theory* Propositional logic and boolean algebras* Induction, recursion and recurrence relations* Order of growth of functions.* Structured counting (combinatorics)* Discrete probability* Graph theory* Trees for algorithmic applications"
 },
 {
   "code": "COMP9021",
   "title": "Principles of Programming",
   "level": "Postgraduate",
   "description": "This is a first programming course. It provides an introduction to programming in Python and covers the following essentials:\nProgram design and implementation in a high level language, with procedural and object oriented constructs and some functional features. Fundamental programming techniques, data structures and algorithms. Debugging and testing. Simulation. Applications in different areas, including those involving graphical user interfaces and animations."
 },
 {
   "code": "COMP9024",
   "title": "Data Structures and Algorithms",
   "level": "Postgraduate",
   "description": "Data types and data structures: abstractions and representations; lists, stacks, queues, heaps, graphs; dictionaries and hash tables; search trees; searching and sorting algorithms."
 },
 {
   "code": "COMP9032",
   "title": "Microprocessors and Interfacing",
   "level": "Postgraduate",
   "description": "Instruction Set Architecture (ISA), floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and I/O interfacing (hardware and software), serial communication, timers, analog input and output, converting analog signals to digital signals (data acquisition), taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers."
 },
 {
   "code": "COMP9044",
   "title": "Software Construction: Techniques and Tools",
   "level": "Postgraduate",
   "description": "Software system decomposition and design. Overview of the software development life-cycle. Command languages. Version control and configuration management, programming for reliability. Testing and debugging techniques. Profiling and code improvement techniques. Practical work involving programming-in-the-large."
 },
 {
   "code": "COMP9101",
   "title": "Design and Analysis of Algorithms",
   "level": "Postgraduate",
   "description": "Techniques for design and performance analysis of algorithms for a variety of computational problems. Asymptotic notations, bounding summations, recurrences, best-case, worst-case and average-case analysis. Design techniques: divide-and-conquer, dynamic programming and memorisation, greedy strategy, backtracking, branch-and-bound. Algorithms: sorting and order statistics, trees, graphs and flow networks, matrices, arithmetic circuits. Intractability: classes P, NP, and NP-completeness, approximation algorithms."
 },
 {
   "code": "COMP9102",
   "title": "Programming Languages and Compilers",
   "level": "Postgraduate",
   "description": "Covers the fundamental principles in programming languages and implementation techniques for compilers (emphasis on compiler front ends).  Course contents include:  program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL(k) and LR(k), attribute grammars, syntax-directed translation, type checking and code generation.  Lab:  implementation of a compiler in a modern programming language for a small programming language."
 },
 {
   "code": "COMP9153",
   "title": "Algorithmic Verification",
   "level": "Postgraduate",
   "description": "This course replaces COMP4151, students can not receive credit for both.\n\nIt is virtually impossible to guarantee the correctness of a system, and in turn the absence of bugs by standard software engineering practice such as code review, systematic testing and good software design alone. The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software. The application of these fully automatic techniques is typically called algorithmic verification.The course will describe several automatic verification techniques, the algorithms they are based on, and the tools that support them. We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools.\n"
 },
 {
   "code": "COMP9154",
   "title": "Foundations of Concurrency",
   "level": "Postgraduate",
   "description": "Concurrency  processes  communication. Communication via shared variables vs message passing. Models of concurrency: true concurrency vs interleaving. Abstractions: atomicity, locks and barriers, semaphores, monitors, threads, RPC, rendezvous. Classical problems: mutual exclusion, dining philosophers, sleeping barber, termination detection, gravitational N-body problem.Practical work: programming assignments and proving of of program safety and liveness properties.\n"
 },
 {
   "code": "COMP9164",
   "title": "Concepts of Programming Languages",
   "level": "Postgraduate",
   "description": "Programming language paradigms: imperative, object oriented, declarative (i.e., functional and logic). Theoretical foundations of programming languages: syntax, operatational, axiomatic and denotational semantics. Implementation aspects of central language features, such as dynamic and strong typing, polymorphism, overloading and automatic memory management. Abstracting over programming languages and architectures: byte code approach, component software."
 },
 {
   "code": "COMP9201",
   "title": "Operating Systems",
   "level": "Postgraduate",
   "description": "Operating system organisation and services. Process management: scheduling, synchronisation and communication. Memory management: virtual memory, paging and segmentation. Storage management: Disk scheduling, file systems. Protection and Security. Distributed operating systems and file systems. Case studies drawn from UNIX, MS-DOS, Mach. Lab. programming assignments."
 },
 {
   "code": "COMP9211",
   "title": "Computer Architecture",
   "level": "Postgraduate",
   "description": "Study the architecture  organisation of modern processors, and influences upon these, with emphasis on pipelined RISC machines; gain understanding of the design of the memory subsystem, I/O, and system level interconnect; become proficient in the use of tools such as VHDL and SimpleScalar for the description, simulation, and verification of architectural designs; complete a series of assignments leading to the design, implementation, validation and assessment of a RISC system. It is assumed students are familiar with combinational and sequential logic design principles and have some experience in the use of CAD tools to describe and simulate digital systems."
 },
 {
   "code": "COMP9222",
   "title": "Digital Circuits and Systems",
   "level": "Postgraduate",
   "description": "This course aims to provide students with a knowledge of problem solving with digital systems (computer systems and digital circuits). The basic building blocks of combinational and sequential circuits are introduced to develop circuit solutions to problems and to understand and implement the design and operation of hardware models of digital and computer systems. HDLs will be used to describe circuits and state of the art computer aided design tools will be used to design complex systems."
 },
 {
   "code": "COMP9242",
   "title": "Advanced Operating Systems",
   "level": "Undergraduate and Postgraduate",
   "description": "Covers operating systems design and implementation issues at an advanced level, focussing on specific issues such as performance and on current OS research areas. Topics selected from: Microkernels; user-level servers; performance; kernel implementation; device drivers; scheduling for real-time; effects and control of hardware caches; security and protection; persistent systems; security; dealing with large, sparse address spaces; experimental systems. A laboratory running a state-of-the-art microkernal system will be used to provide hands-on experience with low-level implementation of OS components."
 },
 {
   "code": "COMP9243",
   "title": "Distributed Systems",
   "level": "Undergraduate and Postgraduate",
   "description": "A detailed coverage of distributed systems, with a particular focus on  operating systems issues: client-server paradigm, remote-procedure call as OS support for client-server; distributed shared memory, distributed memory coherency; distributed file systems; distributed process management, including load sharing and process migration; concurrency  control; fault tolerance, recoverability and distributed transactions; naming; industry standards; case studies."
 },
 {
   "code": "COMP9283",
   "title": "Extended Operating Systems",
   "level": "Postgraduate",
   "description": "As for COMP9201 Operating Systems but in greater depth and breadth."
 },
 {
   "code": "COMP9301",
   "title": "Cyber Security Project",
   "level": "Undergraduate and Postgraduate",
   "description": "Students will complete a small research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate"
 },
 {
   "code": "COMP9302",
   "title": "Cyber Security Project B",
   "level": "Undergraduate and Postgraduate",
   "description": "Students will complete a large research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate"
 },
 {
   "code": "COMP9311",
   "title": "Database Systems",
   "level": "Postgraduate",
   "description": "A first course on database management systems. Data modelling;   principles of database design; data manipulation languages; database  application techniques; introduction to DBMS internals; introduction to  advanced databases. Lab: design and implementation of a database  application using SQL and stored procedures."
 },
 {
   "code": "COMP9312",
   "title": "Data Analytics for Graphs",
   "level": "Undergraduate and Postgraduate",
   "description": "This course aims to systematically introduce fundamental modern techniques related to graph analytics including graph representation, graph traversal, reachability, community analysis, spatial-temporal graphs, graph embedding.\nNote: Students are assumed to have a solid background in programming and database systems. Completion of an algorithms course is also highly desirable."
 },
 {
   "code": "COMP9313",
   "title": "Big Data Management",
   "level": "Undergraduate and Postgraduate",
   "description": "This course introduces the core concepts and technologies involved in managing Big Data. Topics include: characteristics of Big Bata and Big Data analysis, storage systems (e.g. HDFS, S3), techniques for manipulating Big Data (e.g. MapReduce, streaming, compression), programming languages (e.g. Spark, PigLatin), query languages (e.g. Jaql, Hive), database systems (e.g. noSQL systems, HBase), and typical applications (e.g. recommender systems, dimensionality reduction, text analysis)."
 },
 {
   "code": "COMP9315",
   "title": "Database Systems Implementation",
   "level": "Undergraduate and Postgraduate",
   "description": "Detailed examination of techniques used in the implementation of relational, object-oriented and distributed database systems. Topics are drawn from: query optimisation, transaction management, advanced file access methods, database performance tuning."
 },
 {
   "code": "COMP9318",
   "title": "Data Warehousing and Data Mining",
   "level": "Undergraduate and Postgraduate",
   "description": "Data Warehouse: (a) Data Model for Data Warehouses. (b) Implementing Data Warehouses: data  extraction,  cleansing,  transformation  and  loading,  data  cube  computation,  materialized  view  selection, OLAP query processing. Data Mining: (a) Fundamentals: data mining process and system  architecture, relationship with data warehouse and OLAP systems, data pre-processing. (b) Mining  Techniques  and  Application:  association  rules,  mining  spatial  databases,  mining  multimedia  databases, web mining, mining sequence and time-series data, text mining, etc.    The lecture materials will be complemented by projects /assignments."
 },
 {
   "code": "COMP9319",
   "title": "Web Data Compression and Search",
   "level": "Undergraduate and Postgraduate",
   "description": "Data Compression: Adaptive Coding, Information Theory; Text Compression (ZIP, GZIP, BZIP, etc); Burrows-Wheeler Transform and Backward Search; XML Compression\nSearch: Indexing; Pattern Matching and Regular Expression Search; Distributed Querying; Fast Index Construction\nThe lecture materials will be complemented by projects and assignments."
 },
 {
   "code": "COMP9321",
   "title": "Data Services Engineering",
   "level": "Undergraduate and Postgraduate",
   "description": "This course aims to introduce the student to core concepts and practical skills for engineering the data in Web-service-oriented data-driven applications. Specifically, the course aims to expose students to basic infrastructure for building data services on the Web, including techniques to access and ingest data in internal/external sources, develop software services to curate (e.g. extract, transform, correct, aggregate the data), develop services to apply various analytics and develop services to visualize the data to communicate effectively using data. The course uses the Python programming language as the practical basis for its modules. However, the concepts taught are universal and can be applied to any other web development language/framework. "
 },
 {
   "code": "COMP9322",
   "title": "Software Service Design and Engineering",
   "level": "Undergraduate and Postgraduate",
   "description": "The notion of “software as a service” (SaaS) plays a critical role in building distributed, scalable application platforms. This course arms students with the knowledge and expertise to design and engineer services using modern Web technologies. Based on Service Oriented Architecture (SOA) principles, students will be exposed to various design and implementation methodologies, including microservices and their associated design patterns, and API design and management. In addition, this course will strengthen students’ data modeling expertise, covering topics on semantic modelling of both simple and complex structures, and its usage in business analysis. The course will also describe the technical standards and technologies that support semantic data modelling. After completing this course, students will be able to (i) describe different architectural design approaches and their role in engineering software. (ii) apply Web service composition techniques in a concrete setting, (iii) be competent in designing, managing, documenting, testing and securing APIs, (iv) understand techniques for semantic modelling of simple and complex structures, as well as their associated technical standards and technologies.\n"
 },
 {
   "code": "COMP9323",
   "title": "Software as a Service Project",
   "level": "Undergraduate and Postgraduate",
   "description": "This course allows students to explore principles, techniques, architectures, and enabling technologies for the development of the different components and layers of complex SaaS systems. In particular, it discusses the processes related to (1) building a large enterprise system in collaboration with other project members, (2) developing software in a culture of participation, (3) developing software using agile software engineering methodologies, (4) integrating a number of separate components to build an integrated system, and (5) developing appropriate testing strategies and methodologies for given projects."
 },
 {
   "code": "COMP9331",
   "title": "Computer Networks and Applications",
   "level": "Postgraduate",
   "description": "Networking technology overview. Protocol design and validation using the finite state automata in conjunction with time-lines. Overview of the IEEE802 network data link protocol standards. Addressing at the data link and network layers. Network layer services. Introduction to routing algorithms such as Distance Vector and Link State. Congestion control mechanisms. Internetworking issues in connecting networks. The Internet Protocol suite overview. The Internet protocols IPv4 and IPv6. Address resolution using ARP and RARP. Transport layer: issues, transport protocols TCP and UDP. Application level protocols such as: File. Transfer Protocol (FTP), Domain Name System (DNS) and Simple Mail Transfer Protocol (SMTP). Introduction to fundamental network security concepts, 802.11 wireless networks and peer to peer networks. There is a substantial network programming component in the assessable material."
 },
 {
   "code": "COMP9332",
   "title": "Network Routing and Switching",
   "level": "Undergraduate and Postgraduate",
   "description": "This course will focus on the routing and switching architectures, algorithms and protocols for packet switching networks, both connectionless and connection oriented networks (such as IP and ATM networks). Advanced Internet addressing : CIDR, VPN, NAT. In depth discussion of interior and exterior routing protocols, such BGP, OSPF. IP over ATM solutions : such as LANE, Classical IP over ATM. IP switching and MPLS. Mobile IP. Internet Multicasting. Overview of emerging switching and routing technologies, such as optical routing and QoS routing. There is a substantial network programming component in the assessable material, for which C prgramming knowledge is assumed."
 },
 {
   "code": "COMP9334",
   "title": "Capacity Planning of Computer Systems and Networks",
   "level": "Undergraduate and Postgraduate",
   "description": "Techniques for performance evaluation of distributed systems. These techniques will then be applied to designing systems to have good performance, and to the analysis of future workloads and the system changes required to cope with them."
 },
 {
   "code": "COMP9336",
   "title": "Mobile Data Networking",
   "level": "Postgraduate",
   "description": "This course will examine how mobility affects networks, systems, and applications. It will teach advanced concepts and protocols for managing mobility in TCP/IP networks, improving spectrum and energy efficiency of mobile networking, realizing more direct form of device-to-device communication, enhancing the quality of experience of mobile video, and achieving self-powered wireless communication. Learning emerging device functionalities and features will be part of this course, which requires some basic understanding of mobile device programming, such as Android and Java. "
 },
 {
   "code": "COMP9337",
   "title": "Securing Fixed and Wireless Networks",
   "level": "Postgraduate",
   "description": "With exponential growth of the Internet, security of a network has become increasingly challenging. This subject will explore the security vulnerabilities in both fixed and wireless networks and cover the fundamental concepts and advanced issues with an emphasis on the Internet architecture and protocols. \nThe following key concepts will be covered: Wireless Communications and Security overview, Review of Cryptographic techniques, 802.11 Technologies and legacy 802.11 Security: lessons learnt, Encryption Ciphers and Methods in Wireless Networks, Wireless Security Risks, Wireless Security Auditing and Pen Test Introduction,  IPSec and IP layer security,  PKI/X.509, Transport Layer Security/DTLS,   Intrusion Detection and Protection Systems, Network Firewalls, Secure Neighbor Discovery, Routing and Forwarding Security,  Authentication and Key Management in Wireless Networks/Sensor Networks,   Broadcast Security and Secure Code Dissemination,  Network Privacy and Anonymity, Security and Privacy in Location Services, Smart Grid and IoT security."
 },
 {
   "code": "COMP9414",
   "title": "Artificial Intelligence",
   "level": "Postgraduate",
   "description": "Overview of Artificial Intelligence. Topics include: the representation of knowledge, search techniques, problem solving, machine learning, expert systems, natural language understanding, computer vision and an Artificial Intelligence programming language (Prolog or LISP). Students may be required to submit simple Art ificial Intelligence programs, or essays on an aspect of A.I, for assessment, in areas such as robotics, computer vision, natural language processing, and machine learning."
 },
 {
   "code": "COMP9415",
   "title": "Computer Graphics",
   "level": "Postgraduate",
   "description": "Graphics hardware: scan conversion of lines and polygons. 2D transformations: windowing, clipping, viewports. User interfaces. 3D transformations: perspective transformation, 3D clipping, hidden surface removal, lighting and texture maps. Hierarchical modelling of objects, modelling curves and surfaces with splines and fractals. Graphics standards. Lab: programming assignments."
 },
 {
   "code": "COMP9417",
   "title": "Machine Learning and Data Mining",
   "level": "Undergraduate and Postgraduate",
   "description": "Machine learning (ML) is the algorithmic approach to learning from data.  This course provides an introduction to core ideas and techniques in ML, covering theoretical foundations, algorithms, and practical methodology.  Algorithms for supervised and unsupervised learning are covered, including regression, classification, neural networks, tree learning, kernel methods, clustering, dimensionality reduction, ensemble methods, and large-scale ML. Students will be given hands-on experience on applying ML algorithms to real problems and datasets."
 },
 {
   "code": "COMP9418",
   "title": "Advanced Topics in Statistical Machine Learning",
   "level": "Undergraduate and Postgraduate",
   "description": "This course provides an in-depth study of statistical machine learning approaches. The focus will be on methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It is aimed at postgraduate students and advanced undergraduates who are willing to go beyond basic understanding of machine learning.\nThe course provides fundamental support for those willing to intensify their knowledge in the area of big data analytics. It will cover topics on exact and approximate inference in probabilistic graphical models, learning in structured latent variable models, and posterior inference in non-parametric models based on Gaussian processes. "
 },
 {
   "code": "COMP9433",
   "title": "Computational Methods for Robotics",
   "level": "Undergraduate and Postgraduate",
   "description": "This course introduces computational tools for robotics.This course will content an introduction to robotics, basics of Forward and Inverse Kinematics, Robotics systems (i.e. FSM, behaviour trees, event-oriented programming), mapping, SLAM, path planning (i.e. Voronoi diagrams, quadtree), Probabilistic reasoning, POMDP, Reinforcement Learning and Human-Robot Interaction. These concepts will be illustrated with labs using simulated environments (i.e. Processing.org, Unity3D or Webots), integrating various tools into several mini-projects. "
 },
 {
   "code": "COMP9434",
   "title": "Robotic Software Architecture",
   "level": "Postgraduate",
   "description": "An introduction to Intelligent agent design. Picking actions using planning, learning or engineered control. Both practical and theoretical components. Practical component: Re-implement parts of a real agent architecture on a robot. Assignment based. Emphasis on engineering a working system. Theoretical component: Introduction to a variety of research agent architectures including classical planning and reinforcement learning. Lecture and lab based."
 },
 {
   "code": "COMP9444",
   "title": "Neural Networks and Deep Learning",
   "level": "Undergraduate and Postgraduate",
   "description": "Topics chosen from: perceptrons, feedforward neural networks, backpropagation, Hopfield and Kohonen networks, restricted Boltzmann machine and autoencoders, deep convolutional networks for image processing; geometric and complexity analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; designing successful applications of neural networks; recent developments in neural networks and deep learning."
 },
 {
   "code": "COMP9447",
   "title": "Security Engineering Workshop",
   "level": "Undergraduate and Postgraduate",
   "description": "Applied workshop in computer security and cybercrime: attack, defense, auditing.The course will consist of a weekly seminar followed by a three hour per week workshop and lab session on the seminar topic.  Topics are drawn from data sniffing, firewalls and attacks on firewalls, root-kits, exploits, denial of service attacks, intrusion detection systems, honeypots, malware, digital rights management, cryptanalysis, cross site scripting attacks, code injection attacks, threats and countermeasures, penetration testing, and current topics in security."
 },
 {
   "code": "COMP9491",
   "title": "Applied Artificial Intelligence",
   "level": "Undergraduate and Postgraduate",
   "description": "This course presents some advanced topics in various aspects of artificial intelligence such as computer vision, speech and language processing, deep learning, and knowledge representation and reasoning. The course aims to integrate these various aspects of AI and present case studies where such integration of different methodologies delivers interesting applications. Project development is the major component of this course, to develop a solution to a practical or industry-based problem that requires an integration of more than one type of AI techniques ranging from symbolic AI (e.g. knowledge representation and reasoning) to deep learning, with example applications in computer vision, speech and language processing, etc. Assessment is based on group project development. \n"
 },
 {
   "code": "COMP9511",
   "title": "Human Computer Interaction",
   "level": "Postgraduate",
   "description": "Provides an introduction to user-system interactions, both analysis and design. The approach is cognitive, focusing on matching user goals with computer technologies. Topics: the human information processing system, models of interaction, strategies for and process of design, and evaluation. Project work is emphasised."
 },
 {
   "code": "COMP9517",
   "title": "Computer Vision",
   "level": "Undergraduate and Postgraduate",
   "description": "Cameras and Radiometry, local shading models, Colour Vision perception, representation, modelling, linear filters for smoothing, edge detection using concvolution, fourier transform, scale and image pyramids, texture, segmentation by clustering, model fitting and probabilistic methods, tracking and Kalman filters, model-based vision, template matching using classifiers, recognition by relations, applications in robotics, medical imaging, satellite image analysis."
 },
 {
   "code": "COMP9801",
   "title": "Extended Design & Analysis of Algorithms",
   "level": "Postgraduate",
   "description": "As for COMP9101 but in greater depth and breadth."
 },
 {
   "code": "COMP9814",
   "title": "Extended Artificial Intelligence",
   "level": "Postgraduate",
   "description": "As for COMP9414 but in greater depth and breadth."
 },
 {
   "code": "COMP9844",
   "title": "Extended Neural Networks and Deep Learning",
   "level": "Undergraduate and Postgraduate",
   "description": "As for COMP9444 but in greater depth and breadth."
 },
 {
   "code": "COMP9900",
   "title": "Information Technology Project",
   "level": "Postgraduate",
   "description": "A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates contributions to the project."
 },
 {
   "code": "COMP9930",
   "title": "Readings in Computer Science and Engineering",
   "level": "Research",
   "description": "A seminar course analysing topical research papers in computer science and engineering. Each participating student will be assigned a small number of related recent research paper. These papers will be in the general area of the students PhD research topic. The student will do a critical analysis of the papers and present it in a report and a seminar. At the seminar the students analysis are discussed with peers and academic staff. The purpose is to help the student get started in the field, and learn to analyse and constructively criticise others research. \nNote(s): CSE Research Students Only\n"
 },
 {
   "code": "COMP9991",
   "title": "Research Project A",
   "level": "Postgraduate",
   "description": "Students in their final terms of study in MIT (8543) have the option of replacing some coursework with a research project, carried out under the supervision of a CSE academic staff member. This forms the first of a two-part sequence of courses. By the end of the term the student should have researched the problem, identified current approaches, developed a plan to complete the project, and carried out some of that plan. The student must demonstrate this in a formal seminar presented in week 9 of the term.\nEnrolment is subject to meeting the following criteria:\ncompleted (or have advanced standing in) 66 UOC; andobtained agreement from a CSE academic supervisor; andmaintained a distinction level performance in the program\nNote: students who take COMP9991 must also take COMP9992 or COMP9993. They do not take COMP9900 Information Technology Project."
 },
 {
   "code": "COMP9992",
   "title": "Research Project B",
   "level": "Postgraduate",
   "description": "Students in their final terms of study in MIT (8543) have the option of replacing some coursework with a research project, carried out under the supervision of a CSE academic staff member. This forms the second of a two-part sequence of courses. By the end of the second term, the student should have carried out the research work and produced some results. The student must demonstrate this in a formal seminar presented in week 10 of the term and via a written report.\nNote: students who take COMP9992 must also take COMP9991 first. They do not take COMP9900 Information Technology Project."
 },
 {
   "code": "COMP9993",
   "title": "Research Project C",
   "level": "Postgraduate",
   "description": "Students in their final terms of study in MIT (8543) have the option of replacing some coursework with a research project, carried out under the supervision of a CSE academic staff member. This forms the second of a two-part sequence of courses. By the end of the second term, the student should have carried out the research work and produced some results. The student must demonstrate this in a formal seminar presented in week 10 of the term and via a written report.\nNote: students who take COMP9993 must also take COMP9991 first. They do not take COMP9900 Information Technology Project."
 }
]